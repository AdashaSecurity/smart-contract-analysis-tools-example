
=================================================================
Running SMTChecker
=================================================================

Warning: Function state mutability can be restricted to pure
  --> src/smart-contracts/VeriToken.sol:12:5:
   |
12 |     function decimals() public view override returns (uint8) {
   |     ^ (Relevant source part starts here and spans across multiple lines).

Warning: CHC: Overflow (resulting value larger than 2**256 - 1) happens here.
   --> node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol:183:34:
    |
183 |         _approve(owner, spender, allowance(owner, spender) + addedValue);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning: CHC: 1 verification condition(s) could not be proved. Enable the model checker option "show unproved" to see all of them. Consider choosing a specific contract to be verified in order to reduce the solving problems. Consider increasing the timeout per query.

Warning: BMC: Overflow (resulting value larger than 2**256 - 1) happens here.
   --> node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol:241:9:
    |
241 |         _balances[to] += amount;
    |         ^^^^^^^^^^^^^^^^^^^^^^^
Note: Counterexample:
   = 40
  <result> = 2**256
  _balances[from] = 0xFFFFffffFFFFffffFFFFffffFFFFffffFFFFffffFFFFffffFFFFffffFFFFe1d8
  _balances[to] = 7720
  _totalSupply = 0
  amount = 0xFFFFffffFFFFffffFFFFffffFFFFffffFFFFffffFFFFffffFFFFffffFFFFe1d8
  from = 40
  fromBalance = 0xFFFFffffFFFFffffFFFFffffFFFFffffFFFFffffFFFFffffFFFFffffFFFFe1d8
  owner = 40
  to = 39

Note: Callstack:
Note:
   --> node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol:115:9:
    |
115 |         _transfer(owner, to, amount);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Note: 
Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().

Warning: CHC: Overflow (resulting value larger than 2**256 - 1) happens here.
Counterexample:
_totalSupply = 115792089237316195423570985008687907853269984665640564039457584007913129637498, _name = [0x56, 0x65, 0x72, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e], _symbol = [0x56, 0x54]
amount = 2438

Transaction trace:
VeriToken.constructor()
State: _totalSupply = 0, _name = [0x56, 0x65, 0x72, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e], _symbol = [0x56, 0x54]
VeriToken.mint(115792089237316195423570985008687907853269984665640564039457584007913129637498){ msg.sender: 0x08a6 }
    ERC20._mint(0x08a6, 115792089237316195423570985008687907853269984665640564039457584007913129637498) -- internal call
        ERC20._beforeTokenTransfer(0x0, 0x08a6, 115792089237316195423570985008687907853269984665640564039457584007913129637498) -- internal call
        ERC20._afterTokenTransfer(0x0, 0x08a6, 115792089237316195423570985008687907853269984665640564039457584007913129637498) -- internal call
State: _totalSupply = 115792089237316195423570985008687907853269984665640564039457584007913129637498, _name = [0x56, 0x65, 0x72, 0x69, 0x54, 0x6f, 0x6b, 0x65, 0x6e], _symbol = [0x56, 0x54]
VeriToken.mint(2438){ msg.sender: 0x52f7 }
    ERC20._mint(0x52f7, 2438) -- internal call
        ERC20._beforeTokenTransfer(0x0, 0x52f7, 2438) -- internal call
   --> node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol:262:9:
    |
262 |         _totalSupply += amount;
    |         ^^^^^^^^^^^^^^^^^^^^^^

Warning: CHC: 3 verification condition(s) could not be proved. Enable the model checker option "show unproved" to see all of them. Consider choosing a specific contract to be verified in order to reduce the solving problems. Consider increasing the timeout per query.


