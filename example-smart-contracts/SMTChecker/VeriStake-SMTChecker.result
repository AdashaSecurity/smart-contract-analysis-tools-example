
=================================================================
Running SMTChecker
=================================================================

Warning: CHC: Error trying to invoke SMT solver.
  --> src/VeriStake.sol:50:33:
   |
50 |         uint256 stakedAmount =  staked[msg.sender] + amount;
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning: CHC: Overflow (resulting value larger than 2**256 - 1) happens here.
Counterexample:
veriToken = 0
amount = 0
duration = 2438
stakedAmount = 0
stakedUntil = 0

Transaction trace:
VeriStake.constructor(0x0)
State: veriToken = 0
VeriStake.stake(0, 2438){ block.timestamp: 115792089237316195423570985008687907853269984665640564039457584007913129637498, msg.sender: 0x52f6 }
    veriToken.transferFrom(msg.sender, address(this), amount) -- untrusted external call
  --> src/VeriStake.sol:51:32:
   |
51 |         uint256 stakedUntil =  block.timestamp + duration;
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning: CHC: Assertion violation happens here.
Counterexample:
veriToken = 0
amount = 8946
duration = 0
stakedAmount = 8946
stakedUntil = 10000

Transaction trace:
VeriStake.constructor(0x0)
State: veriToken = 0
VeriStake.stake(8946, 0){ block.timestamp: 10000, msg.sender: 0x26 }
    veriToken.transferFrom(msg.sender, address(this), amount) -- untrusted external call
  --> src/VeriStake.sol:57:9:
   |
57 |         assert(stakedUntil != 10000);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Warning: CHC: 1 verification condition(s) could not be proved. Enable the model checker option "show unproved" to see all of them. Consider choosing a specific contract to be verified in order to reduce the solving problems. Consider increasing the timeout per query.

Warning: BMC: Overflow (resulting value larger than 2**256 - 1) happens here.
  --> src/VeriStake.sol:50:33:
   |
50 |         uint256 stakedAmount =  staked[msg.sender] + amount;
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
Note: Counterexample:
  <result> = 2**256
  amount = 7720
  duration = 0
  stakedAmount = 0
  stakedUntil = 0
  staked[msg.sender] = 0xFFFFffffFFFFffffFFFFffffFFFFffffFFFFffffFFFFffffFFFFffffFFFFe1d8
  this = 0
  veriToken = 0

Note: Callstack:
Note: 
Note that array aliasing is not supported, therefore all mapping information is erased after a mapping local variable/parameter is assigned.
You can re-introduce information using require().
Note that external function calls are not inlined, even if the source code of the function is available. This is due to the possibility that the actual called contract has the same ABI but implements the function differently.

